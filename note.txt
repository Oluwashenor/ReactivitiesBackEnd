API - Recieves the HTTP Request and Response to Them (Depends on Application)
Application - Process Business Logic (Depends on Domain)
Domain - Contains Business Entities (At the center of everything)
Persistence - Provides the connectiom to the databse and translate the code into SQL Queries (Depends on Domain and Application)

Create Project
dotnet --info  - shows dotnet info your your computer
dotnet -h - it shows list of available dotnet commands
dotnet new -l -- shows list of template available to create new dotnet project or files 


First Create a solution file
dotnet new sln

dotnet new webapi -n API -- the '-n' creates a folder that contains the project content
dotnet new classlib -n Persistence - creates the class lib for Persistence in its folder

we need to add projects to solutions using 'dotnet sln add API/'

we eneter into API and use 
dotnet add reference ../Application


anything is square bracket is an attribute

Entity frameowkr is am ORM, ORM allows us to write C# code to query Database

Create DB COntext in Persistence
install EF

dotnet tool list --global --- to check the your net tools if installed 

dotnet ef migrations add InitialCreate -p .\Persistence\ -s API   - Persistence for where we want to put it and API for where start up class is ]


Learning Goals
Clean Architecture Pattern
CQRS + Mediator Pattern (Command Query Responsibilty Segregation)
Mor elike command and query seperation 
Command 
- DOes something
Modifies state 
should not return a value
e.g Creating, deleting

Query 
ANswers a question
does not modify state 
should return a value 
e.g returning single or list of things


Application project contains all business Logics


dotnet build, to restore project - sometimes in case packages dont reflect

 public async Task<IActionResult> CreateActivity(Activity activity) // Its smart enough to look for the data from the body

